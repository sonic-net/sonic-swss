#ifndef VRRPSYNC__
#define VRRPSYNC__

#include <string>
#include "dbconnector.h"
#include "producerstatetable.h"
#include "netmsg.h"
#include "warmRestartAssist.h"

#include "netmsg.h"

using namespace std;
namespace swss {

class VrrpSync : public NetMsg
{
public:
    enum {MAX_ADDR_SIZE = 256};

    VrrpSync(RedisPipeline *pipelineAppDB, DBConnector* cfgDb);
    ~VrrpSync();

    void VrrpLinkProcess(int ifindex, std::string &ifname, std::string &parent_ifname, int afi, std::string vmac, unsigned int if_flags, bool is_del);
    void VrrpAddrUp(int ifindex, std::string &ifname, int afi, std::string &vip);
    void VrrpAddrDown(int ifindex, std::string &ifname, int afi, std::string &vip);
    void VrrpDbUpdate(std::string &macVlanIf, int key, std::string &ifname, int afi, std::string &vip, std::string &vmac, bool del);	
    void VrrpUpdateNetdevFlags(std::string &ifname, int afi);
    void VrrpUpdateVipNbr(string &macVlanIf, string &ifname, int afi, string &vip, bool del);
    void VrrpUpdateNbr(string &ifname, int afi, string &vip, string &op);

    bool getAutoIPv6LL(const std::string& ifname, std::string& lladdr);
    bool isAutoGeneratedIPv6LL(const std::string& vip, const std::string& ifname);
    std::string VrrpIfindexToName(int ifindex);
    bool getSystemMac(std::string& mac);
    std::string ReadLineFromFile(const string file, bool *exists);
    void WriteToFile(const string& file, const string& value);

    virtual void onMsg(int nlmsg_type, struct nl_object *obj);


    AppRestartAssist *getRestartAssist()
    {
        return m_AppRestartAssist;
    }

private:
    struct vrrpmacip
    {
        unsigned int if_state;
        std::string ifname;
        std::string parent_ifname;
        std::string vmac;
        std::set<std::string> m_vip;
    };
    
    std::unordered_map<int, vrrpmacip > m_vrrpinfo;
    std::string systemMac = "";

    struct nl_cache    *m_link_cache;
    struct nl_sock     *m_nl_sock;


    ProducerStateTable m_vrrpTable;
    AppRestartAssist * m_AppRestartAssist;
    Table m_cfgDeviceMetadataTable;

    unsigned int m_netLinkOnMsg = 0;
    unsigned int m_netLinkOnMsgUse = 0;
    unsigned int m_netLinkOnMsgLinkNew = 0;
    unsigned int m_netLinkOnMsgLinkNewUse = 0;
    unsigned int m_netLinkOnMsgLinkDel = 0;
    unsigned int m_netLinkOnMsgLinkDelUse = 0;
    unsigned int m_netLinkOnMsgAddrAdd = 0;
    unsigned int m_netLinkOnMsgAddrAddUse = 0;
    unsigned int m_netLinkOnMsgAddrDel = 0;
    unsigned int m_netLinkOnMsgAddrDelUse = 0;
};

}

#endif
